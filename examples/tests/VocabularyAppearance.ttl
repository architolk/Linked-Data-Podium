@prefix stage: <http://localhost:8080/stage#>.
@prefix elmo: <http://bp4mc2.org/elmo/def#>.
@prefix html: <http://www.w3.org/1999/xhtml/vocab#>.
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>.

@prefix yed: <http://bp4mc2.org/yed#>.

stage:VocabularyAppearance	a	elmo:Representation;
	elmo:url-pattern	"^http://localhost:8080/def/lotr(\\.(xml|ttl|json))?$";
	elmo:contains stage:HeaderAppearance;
	elmo:contains stage:NavbarSearchAppearance;
	elmo:appearance elmo:VocabularyAppearance;
	elmo:query stage:VocabularyQuery;
.

stage:UploadedVocabulary a elmo:Representation;
	elmo:url-pattern "/query/uploaded-vocabulary$";
	elmo:contains stage:HeaderAppearance;
	elmo:contains stage:NavbarSearchAppearance;
	elmo:appearance elmo:VocabularyAppearance;
	elmo:query '''
		construct {?s?p?o}
		where {
			graph <http://localhost:8080/container/upload> {
				?s?p?o
			}
		}
	''';
.

stage:UploadedModelAppearance a elmo:Representation;
	elmo:url-pattern "/query/uploaded-model";
	elmo:index "1";
	elmo:contains stage:HeaderAppearance;
	elmo:contains stage:NavbarSearchAppearance;
	elmo:appearance elmo:ModelAppearance;
	elmo:query '''
		construct {?s?p?o}
		where {
			graph <http://localhost:8080/container/upload> {
				?s?p?o
			}
		}
	''';
.

stage:UploadedShapes a elmo:Representation;
	elmo:url-pattern "/query/uploaded-shapes$";
	elmo:contains stage:HeaderAppearance;
	elmo:contains stage:NavbarSearchAppearance;
	elmo:appearance elmo:VocabularyAppearance;
	elmo:query stage:UploadedShapesQuery;
.

stage:UploadedShapesModel a elmo:Representation;
	elmo:url-pattern "/query/uploaded-shapes-model";
	elmo:index "1";
	elmo:contains stage:HeaderAppearance;
	elmo:contains stage:NavbarSearchAppearance;
	elmo:appearance elmo:ModelAppearance;
	elmo:query stage:UploadedShapesQuery;
.
stage:UploadedShapesQuery a elmo:Query;
	elmo:query '''
		prefix shacl: <http://www.w3.org/ns/shacl#>
		prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
		construct {
			?shape ?sp ?so.
			?class a rdfs:Class.
			?class rdfs:comment "".
			?subclass rdfs:subClassOf ?superclass.
			?superclass a rdfs:Class.
			?pc ?pcp ?pco.
			?property a rdf:Property.
			?property rdfs:comment "".
			?subproperty rdfs:subPropertyOf ?superproperty.
			?superproperty a rdf:Property.
		}
		where {
			graph <http://localhost:8080/container/upload> {
				?shape a shacl:Shape.
				?shape ?sp ?so.
				OPTIONAL {
					?shape shacl:scopeClass ?class.
					OPTIONAL {
						?class rdfs:subClassOf* ?subclass.
						?subclass rdfs:subClassOf ?superclass
					}
				}
				OPTIONAL {
					?shape shacl:property ?pc.
					?pc ?pcp ?pco.
					OPTIONAL {
						?pc shacl:predicate ?property.
						OPTIONAL {
							?property rdfs:subPropertyOf* ?subproperty.
							?subproperty rdfs:subPropertyOf ?superproperty
						}
					}
				}
			}
		}
	''';
.

stage:UploadedShapesAppearanceYed a elmo:Representation;
	elmo:url-pattern	"/query/uploaded-shapes\\.yed$";
	elmo:layer elmo:TopLayer;
	elmo:fragment [
		elmo:applies-to rdfs:subClassOf;
		rdfs:label "";
		yed:sourceArrow "none";
		yed:targetArrow "white_delta";
	];
	elmo:query '''
		prefix shacl: <http://www.w3.org/ns/shacl#>
		prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
		prefix owl: <http://www.w3.org/2002/07/owl#>
		CONSTRUCT {
			?element rdfs:comment ?attribs.
			?element rdfs:subClassOf ?super.
			?element ?pc ?class.
			?element a owl:Class.
			?pc rdfs:label ?plabel.
		}
		WHERE {
			GRAPH <http://localhost:8080/container/upload> {
				?shape shacl:scopeClass ?element.
				OPTIONAL {?element rdfs:subClassOf ?super}
				OPTIONAL {
					select ?shape ?pc ?class (concat(if(bound(?plabel),?plabel,strafter(str(?pred),"#"))," [",if(bound(?minc),?minc,"0"),",",if(bound(?maxc),?maxc,"n"),"]") as ?plabel)
					where {
						?shape shacl:property ?pc.
						?pc shacl:predicate ?pred.
						?pc shacl:class ?class.
						OPTIONAL {?pred rdfs:label ?plabel}
						OPTIONAL {?pc shacl:minCount ?minc}
						OPTIONAL {?pc shacl:maxCount ?maxc}
						FILTER NOT EXISTS {?pc shacl:in ?col}
					}
				}
				OPTIONAL {
					select ?shape (group_concat(concat(if(bound(?plabel),?plabel,strafter(str(?pred),"#"))," (",strafter(str(?datatype),"#"),") [",if(bound(?minc),?minc,"0"),",",?maxc,"]");separator="\\n") as ?attribs)
					where {
						?shape shacl:property ?pc.
						?pc shacl:predicate ?pred.
						OPTIONAL {?pc shacl:datatype ?datatype}
						OPTIONAL {?pc shacl:minCount ?minc}
						OPTIONAL {?pc shacl:maxCount ?maxc}
						FILTER NOT EXISTS {
							?pc shacl:class ?class.
							?class a owl:Class.
						}
					}
					group by ?shape
				}
			}
		}
	''';
.

stage:UploadedVocabularyAppearanceYed a elmo:Representation;
	elmo:url-pattern	"/query/uploaded-vocabulary\\.yed$";
	elmo:layer elmo:TopLayer;
	elmo:fragment [
		elmo:applies-to rdfs:subClassOf;
		rdfs:label "";
		yed:sourceArrow "none";
		yed:targetArrow "white_delta";
	];
	elmo:query '''
		prefix shacl: <http://www.w3.org/ns/shacl#>
		prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
		prefix owl: <http://www.w3.org/2002/07/owl#>
		CONSTRUCT {
			?element rdfs:label ?label.
			?element rdfs:comment ?attribs.
			?element rdfs:subClassOf ?super.
			?element ?pc ?class.
			?element a owl:Class.
			?pc rdfs:label ?plabel.
		}
		WHERE {
			GRAPH <http://localhost:8080/container/upload> {
				?element a owl:Class.
				?element rdfs:label ?label
				OPTIONAL {?element rdfs:subClassOf ?super}
				OPTIONAL {
					select ?element ?pc ?class (concat(if(bound(?plabel),?plabel,strafter(str(?pred),"#"))," [",if(bound(?minc),?minc,"0"),",",if(bound(?maxc),?maxc,"n"),"]") as ?plabel)
					where {
						?shape shacl:scopeClass ?element.
						?shape shacl:property ?pc.
						?pc shacl:predicate ?pred.
						?pc shacl:class ?class.
						?class a owl:Class.
						OPTIONAL {?pred rdfs:label ?plabel}
						OPTIONAL {?pc shacl:minCount ?minc}
						OPTIONAL {?pc shacl:maxCount ?maxc}
						FILTER NOT EXISTS {?pc shacl:in ?col}
					}
				}
				OPTIONAL {
					select ?element (group_concat(concat(if(bound(?plabel),?plabel,strafter(str(?pred),"#"))," (",strafter(str(?datatype),"#"),") [",if(bound(?minc),?minc,"0"),",",?maxc,"]");separator="\\n") as ?attribs)
					where {
						?shape shacl:scopeClass ?element.
						?shape shacl:property ?pc.
						?pc shacl:predicate ?pred.
						OPTIONAL {?pred rdfs:label ?plabel}
						OPTIONAL {?pc shacl:datatype ?datatype}
						OPTIONAL {?pc shacl:minCount ?minc}
						OPTIONAL {?pc shacl:maxCount ?maxc}
						FILTER NOT EXISTS {
							?pc shacl:class ?class.
							?class a owl:Class.
						}
					}
					group by ?element
				}
			}
		}
	''';
.

stage:VocabularyAppearanceYed a elmo:Representation;
	elmo:url-pattern	"^http://localhost:8080/def/lotr\\.yed?$";
	elmo:layer elmo:TopLayer;
	elmo:fragment [
		elmo:applies-to rdfs:subClassOf;
		rdfs:label "";
		yed:sourceArrow "none";
		yed:targetArrow "white_delta";
	];
	elmo:query '''
		prefix shacl: <http://www.w3.org/ns/shacl#>
		prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
		prefix owl: <http://www.w3.org/2002/07/owl#>
		CONSTRUCT {
			?element rdfs:label ?label.
			?element rdfs:comment ?attribs.
			?element rdfs:subClassOf ?super.
			?element ?pc ?class.
			?element a owl:Class.
			?pc rdfs:label ?plabel.
		}
		WHERE {
			GRAPH <http://localhost:8080/stage> {
				?element a owl:Class.
				?element rdfs:label ?label
				OPTIONAL {?element rdfs:subClassOf ?super}
				OPTIONAL {
					select ?element ?pc ?class (concat(if(bound(?plabel),?plabel,strafter(str(?pred),"#"))," [",if(bound(?minc),?minc,"0"),",",if(bound(?maxc),?maxc,"n"),"]") as ?plabel)
					where {
						?shape shacl:scopeClass ?element.
						?shape shacl:property ?pc.
						?pc shacl:predicate ?pred.
						?pc shacl:class ?class.
						?class a owl:Class.
						OPTIONAL {?pred rdfs:label ?plabel}
						OPTIONAL {?pc shacl:minCount ?minc}
						OPTIONAL {?pc shacl:maxCount ?maxc}
						FILTER NOT EXISTS {?pc shacl:in ?col}
					}
				}
				OPTIONAL {
					select ?element (group_concat(concat(if(bound(?plabel),?plabel,strafter(str(?pred),"#"))," (",strafter(str(?datatype),"#"),") [",if(bound(?minc),?minc,"0"),",",?maxc,"]");separator="\\n") as ?attribs)
					where {
						?shape shacl:scopeClass ?element.
						?shape shacl:property ?pc.
						?pc shacl:predicate ?pred.
						OPTIONAL {?pred rdfs:label ?plabel}
						OPTIONAL {?pc shacl:datatype ?datatype}
						OPTIONAL {?pc shacl:minCount ?minc}
						OPTIONAL {?pc shacl:maxCount ?maxc}
						FILTER NOT EXISTS {
							?pc shacl:class ?class.
							?class a owl:Class.
						}
					}
					group by ?element
				}
			}
		}
	''';
.

stage:VocabularyQuery a elmo:Query;
	elmo:query '''
		prefix dcterms: <http://purl.org/dc/terms/>
		prefix shacl: <http://www.w3.org/ns/shacl#>
		prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
		prefix skos: <http://www.w3.org/2004/02/skos/core#>
		prefix owl: <http://www.w3.org/2002/07/owl#>
		CONSTRUCT {
			?element a ?type.
			?element rdfs:label ?label.
			?element rdfs:comment ?def.
			?element rdfs:subClassOf ?super.
			?shape shacl:targetClass ?element.
			?shape shacl:property ?pc.
			?pc shacl:path ?pred.
			?pc shacl:class ?class.
			?pc shacl:datatype ?datatype.
			?pc shacl:in ?collection.
			?pc shacl:pattern ?pattern.
		}
		WHERE {
			GRAPH <http://localhost:8080/stage> {
				?element a ?type.
				OPTIONAL {?element rdfs:label ?label}
				OPTIONAL {?element rdfs:comment ?def}
				OPTIONAL {
					?element dcterms:subject ?begrip.
					?begrip skos:definition ?def.
				}
				OPTIONAL {?element rdfs:subClassOf ?super}
				OPTIONAL {
					?shape shacl:targetClass ?element.
					?shape shacl:property ?pc.
					?pc (shacl:path|shacl:predicate) ?pred.
					OPTIONAL {?pc shacl:class ?class}
					OPTIONAL {?pc shacl:datatype ?datatype}
					OPTIONAL {?pc shacl:in ?collection}
					OPTIONAL {?pc shacl:pattern ?pattern}
				}
				FILTER (?type = owl:Class || ?type = owl:DatatypeProperty || ?type = owl:ObjectProperty || ?type = owl:Ontology)
			}
		}
	'''
.

