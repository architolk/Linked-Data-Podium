@prefix elmo: <http://bp4mc2.org/elmo/def#>.
@prefix html: <http://www.w3.org/1999/xhtml/vocab#>.
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>.
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>.
@prefix owl: <http://www.w3.org/2002/07/owl#>.
@prefix yed: <http://bp4mc2.org/yed#>.
@prefix skos: <http://www.w3.org/2004/02/skos/core#>.
@prefix stage: <http://localhost:8080/data2viz/stage#>.

owl:Class elmo:style "CLASS".
owl:ObjectProperty elmo:style "PROPERTY".
owl:DatatypeProperty elmo:style "PROPERTY".
rdf:Property elmo:style "PROPERTY".
rdfs:Class elmo:style "CLASS".
skos:Concept elmo:style "CONCEPT".
rdf:Literal elmo:style "LITERAL".

stage:Triples a elmo:Representation;
  elmo:url-pattern "/query/triples(|\.ttl|\.json|\.xml)$";
  elmo:contains stage:Menu;
  elmo:appearance elmo:TurtleAppearance;
  elmo:query '''
    PREFIX container: <http://linkeddata.ordina.nl/data2viz/container/>
    CONSTRUCT {
      ?s?p?o
    }
    WHERE {
      GRAPH container:data {
        ?s?p?o
      }
    }
  ''';
.

stage:TriplesYed a elmo:Representation;
  elmo:url-pattern "/query/triples\.yed$";
  elmo:fragment [
    elmo:applies-to "BLUE";
    yed:fill "#8080FF";
    yed:color "#0000A0";
    yed:nodeType "ellipse";
  ];
  elmo:fragment [
    elmo:applies-to "GREY";
    yed:fill "#A0A0A0";
    yed:color "#A0A0A0";
    yed:nodeType "ellipse";
  ];
  elmo:fragment [
    elmo:applies-to "GREEN";
    yed:fill "#A0FFA0";
    yed:color "#00A000";
    yed:nodeType "ellipse";
  ];
  elmo:fragment [
    elmo:applies-to "YELLOW";
    yed:fill "#FFFF80";
    yed:color "#A0A000";
    yed:nodeType "ellipse";
  ];
  elmo:fragment [
    elmo:applies-to "EXTERN";
    yed:fill "#FFFFFF";
    yed:line "dashed";
    yed:nodeType "ellipse";
  ];
  elmo:fragment [
    elmo:applies-to "INFERRED";
    yed:color "#A0A0A0";
    yed:nodeType "ellipse";
  ];
  elmo:fragment [
    elmo:applies-to "RESOURCE";
    yed:fill "#CCE3CA";
    yed:color "#000000";
    yed:nodeType "ellipse";
  ];
  elmo:fragment [
    elmo:applies-to "BNODE";
    yed:fill "#FFFFFF";
    yed:color "#000000";
    yed:nodeType "ellipse";
  ];
  elmo:fragment [
    elmo:applies-to "INDIVIDUAL";
    yed:fill "#FAE0C1";
    yed:nodeType "ellipse";
  ];
	elmo:fragment [
		elmo:applies-to "CLASS";
    yed:fill "#D2E2FB";
    yed:color "#6E8CBD";
    yed:nodeType "ellipse";
	];
  elmo:fragment [
		elmo:applies-to "PROPERTY";
    yed:fill "#D2E2FB";
    yed:color "#6E8CBD";
    yed:nodeType "ellipse";
	];
	elmo:fragment [
		elmo:applies-to "DOC";
    yed:fill "#FDF0C1";
    yed:color "#CEAA47";
    yed:nodeType "ellipse"
	];
  elmo:fragment [
		elmo:applies-to "LITERAL";
    yed:fill "#FFFFFF";
    yed:nodeType "roundrectangle"
	];
  elmo:fragment [
		elmo:applies-to "REF";
    yed:fill "#FFFFFF";
    yed:nodeType "ellipse"
	];
	elmo:fragment [
		elmo:applies-to "CONCEPT";
		yed:fill "#FFFF99";
    yed:color "#C6C600";
    yed:nodeType "ellipse";
	];
  elmo:fragment [
    elmo:applies-to rdfs:seeAlso;
    yed:line "dashed";
  ];
	elmo:query '''
    prefix elmo: <http://bp4mc2.org/elmo/def#>
    prefix container: <http://linkeddata.ordina.nl/data2viz/container/>
		construct {
      ?s?p?o.
      ?s rdfs:label ?slabel.
      ?s elmo:style ?style.
      ?s ?plit ?litres.
      ?litres rdf:type rdf:Literal.
      ?litres elmo:style "LITERAL".
      ?litres rdfs:label ?olitstr.
      ?ds ?dp ?do.
    }
		where {
      {
  			graph container:data {
          {
            {
      				?s?p?o
              FILTER (?p != elmo:style && (!IsLiteral(?o)))
            }
            UNION
            {
              ?s rdfs:label ?slabel
            }
            UNION
            {
              select ?s ?plit (concat('"',?olit,'"') as ?olitstr) (iri(concat("urn:",md5(concat(str(?s),str(?plit),?olit)))) as ?litres)
              where {
                ?s ?plit ?olit
                FILTER (isLiteral(?olit) && ?plit != rdfs:label && ?plit != elmo:style)
              }
            }
          }
  			}
        optional {
          graph container:data {
            ?s rdf:type ?namedclass
          }
          graph <@STAGE@> {
            ?namedclass elmo:style ?cstyle
          }
        }
        optional {
          graph container:data {
            ?s rdf:type ?namedclass.
            ?namedclass elmo:style ?cstyle
          }
        }
        optional {
          graph container:data {
            ?s elmo:style ?cstyle
            FILTER NOT EXISTS {?s rdf:type owl:Class}
          }
        }
        BIND (IF(BOUND(?cstyle),str(?cstyle),IF(isIRI(?s),"RESOURCE","BNODE")) as ?style)
      }
      UNION
      {
        graph container:data {
          ?so ?po ?s
          FILTER (IsIri(?s))
          FILTER NOT EXISTS {?s a ?st}
          BIND (rdf:type as ?p)
          BIND (rdfs:Resource as ?o)
          BIND ("RESOURCE" as ?style)
        }
      }
      UNION
		  {
        graph container:data {
          ?ds ?dsp ?dso.
        }
        graph container:diagram {
          ?ds ?dp ?do
        }
      }
		}
	''';
.
